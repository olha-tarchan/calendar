{"version":3,"sources":["store/reducers/auth/types.ts","utils/rules.ts","hooks/useTypedSelector.ts","store/reducers/event/types.ts","api/UserService.ts","store/reducers/auth/action-creators.ts","store/reducers/event/action-creator.ts","store/reducers/modalWindow/types.ts","store/reducers/modalWindow/action-creator.ts","routes/index.ts","store/reducers/action-creators.ts","hooks/useActions.ts","components/LoginForm.tsx","pages/Login.tsx","utils/date.ts","components/EventCalendar.tsx","components/EventForm.tsx","components/ModalWindow.tsx","pages/Event.tsx","components/AppRouter.tsx","components/Navbar.tsx","App.tsx","store/reducers/auth/index.ts","store/reducers/event/index.ts","store/reducers/modalWindow/index.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["AuthActionEnum","rules","messaga","required","message","validator","_","value","isSameOrAfter","moment","Promise","resolve","reject","Error","useTypedSelector","useSelector","EventActionEnum","UserService","axios","get","AuthActionCreators","setIsAuth","auth","type","SET_AUTH","payload","setUser","user","SET_USER","setIsLoading","SET_IS_LOADING","setError","SET_ERROR","login","username","password","dispatch","a","setTimeout","getUsers","response","mockUser","data","find","localStorage","setItem","e","logout","removeItem","ModalWindowActionEnum","EventActionCreator","setGuests","SET_GUESTS","setEvents","SET_EVENTS","fetchGuest","console","log","createEvent","event","events","getItem","json","JSON","parse","push","stringify","fetchEvents","currentUserEvents","filter","ev","author","guest","editEvent","map","id","date","description","deleteEvent","eventId","currentEvents","RouterName","ModalWindowActionCreator","openModalWindow","OPEN_MODAL_WINDOW","openModalWindowWithData","OPEN_MODAL_WINDOW_WITH_DATA","closeModalWindow","CLOSE_MODAL_WINDOW","allActionCreators","useAction","useDispatch","bindActionCreators","LoginForm","state","error","isLoading","useState","setUsername","setPassword","title","bordered","style","width","Meta","marginBottom","name","labelCol","span","wrapperCol","initialValues","remember","onFinish","autoComplete","color","Item","label","onChange","target","Password","offset","loading","htmlType","Login","justify","align","className","formatDate","year","getFullYear","month","getMonth","day","getDate","EventCalendar","fullscreen","dateCellRender","formatedDate","toDate","currentDayEvents","index","titleEv","onClick","initialEvent","EventForm","modalWindow","guests","setEvent","isEdit","setIsEdit","dateFormat","useEffect","Number","Date","now","toString","replaceAll","format","dateMoment","gue","Option","ModalWindow","open","isPropertyAuthor","hasOwnProperty","visible","onCancel","footer","Event","publicRoutes","path","LOGIN","exact","component","privatRoutes","EVENT","AppRouter","isAuth","route","to","Navbar","router","useHistory","theme","mode","selectable","App","padding","textAlign","initialState","action","DELETE_EVENT","rootReducer","combineReducers","reducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f9d3aa7b.chunk.js","sourcesContent":["import {IUser} from \"../../../models/IUser\";\n\nexport interface AuthState {\n    isAuth:boolean;\n    user: IUser;\n    isLoading: boolean;\n    error: string\n}\nexport enum AuthActionEnum {\n    SET_AUTH = \"SET_AUTH\",\n    SET_ERROR = \"SET_ERROR\",\n    SET_USER = \"SET_USER\",\n    SET_IS_LOADING = \"SET_IS_LOADING\"\n}\n\nexport interface SetAuthAction {\n    type: AuthActionEnum.SET_AUTH,\n    payload: boolean\n}\n\nexport interface SetErrorAction {\n    type: AuthActionEnum.SET_ERROR,\n    payload: string\n}\nexport interface SetUserAction {\n    type: AuthActionEnum.SET_USER,\n    payload: IUser\n}\nexport interface SetIsLoadingAction {\n    type: AuthActionEnum.SET_IS_LOADING,\n    payload: boolean\n}\n\nexport type AuthAction =\n    SetAuthAction |\n    SetErrorAction |\n    SetUserAction |\n    SetIsLoadingAction","import moment, {Moment} from \"moment\";\n\nexport const rules = {\n    required: (messaga:string = \"Fill in the field\") => ({\n        required: true,\n        messaga\n    }),\n    isDateAfter: (message: string) =>  ({\n      validator(_:any, value: Moment){\n          if(value.isSameOrAfter(moment())){\n              return Promise.resolve();\n          }\n          return Promise.reject(new Error(message));\n      }\n    })\n}","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\nimport {RootState} from \"../store\";\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {IUser} from \"../../../models/IUser\";\nimport {IEvent} from \"../../../models/IEvent\";\n\nexport interface EventState {\n    guests: IUser[];\n    events: IEvent[];\n}\n\nexport enum EventActionEnum {\n    SET_GUESTS = \"SET_GUESTS\",\n    SET_EVENTS = \"SET_EVENTS\",\n    DELETE_EVENT = \"DELETE_EVENT\"\n}\n\nexport interface SetGuestsAction {\n    type: EventActionEnum.SET_GUESTS;\n    payload: IUser[]\n}\n\nexport interface SetEventsAction {\n    type: EventActionEnum.SET_EVENTS;\n    payload: IEvent[]\n}\n\nexport interface DeleteEvent {\n    type: EventActionEnum.DELETE_EVENT;\n    payload: string\n}\n\nexport type EventAction =\n    SetEventsAction |\n    SetGuestsAction |\n    DeleteEvent","import axios, {AxiosResponse} from \"axios\";\nimport {IUser} from \"../models/IUser\";\n\nexport default class UserService {\n    static async getUsers(): Promise<AxiosResponse<IUser[]>> {\n        return axios.get<IUser[]>('./user.json')\n    }\n}","import {IUser} from \"../../../models/IUser\";\nimport {\n    AuthActionEnum,\n    SetAuthAction,\n    SetErrorAction,\n    SetIsLoadingAction,\n    SetUserAction\n} from \"./types\";\nimport {AppDispatch} from \"../../index\";\n// import axios from \"axios\";\nimport UserService from \"../../../api/UserService\";\n\nexport const AuthActionCreators = {\n    setIsAuth: (auth:boolean): SetAuthAction => ({\n        type: AuthActionEnum.SET_AUTH,\n        payload:auth\n    }),\n    setUser: (user:IUser): SetUserAction => ({\n        type: AuthActionEnum.SET_USER,\n        payload:user\n    }),\n    setIsLoading: (payload:boolean): SetIsLoadingAction => ({\n        type: AuthActionEnum.SET_IS_LOADING,\n        payload\n    }),\n    setError: (payload:string): SetErrorAction => ({\n        type: AuthActionEnum.SET_ERROR,\n        payload\n    }),\n    login: (username:string, password: string) => async(dispatch:AppDispatch) => {\n        try {\n            dispatch(AuthActionCreators.setIsLoading(true));\n            setTimeout(async () => {\n             //   const response = await axios.get<IUser[]>('./user.json');\n                const response = await UserService.getUsers();\n                const mockUser = response.data\n                    .find(user => user.username === username && user.password === password);\n                if(mockUser){\n                    localStorage.setItem('auth', 'true');\n                    localStorage.setItem('username', mockUser.username);\n                    localStorage.setItem('password', mockUser.password);\n\n                    dispatch(AuthActionCreators.setUser(mockUser));\n                    dispatch(AuthActionCreators.setIsAuth(true));\n                    dispatch(AuthActionCreators.setError(''));\n                } else {\n                    dispatch(AuthActionCreators.setError('Failed correctly fill user or password'));\n                }\n                dispatch(AuthActionCreators.setIsLoading(false))\n            }, 1000)\n        }\n        catch(e){\n            dispatch(AuthActionCreators.setError(\"We have Error during login\"));\n        }\n    },\n    logout: () => async (dispatch:AppDispatch) => {\n        try {\n            localStorage.removeItem('auth');\n            localStorage.removeItem('username');\n            localStorage.removeItem('password');\n            dispatch(AuthActionCreators.setIsAuth(false));\n            dispatch(AuthActionCreators.setUser({} as IUser));\n            dispatch(AuthActionCreators.setError(''));\n        }\n        catch(e){\n            dispatch(AuthActionCreators.setError(\"We have Problem with LogOut\"));\n        }\n    }\n}","import {EventActionEnum, SetGuestsAction, SetEventsAction} from \"./types\";\nimport {IUser} from \"../../../models/IUser\";\nimport {IEvent} from \"../../../models/IEvent\";\nimport {AppDispatch} from \"../../index\";\nimport UserService from \"../../../api/UserService\";\n\nexport const EventActionCreator = {\n    setGuests: (payload:IUser[]): SetGuestsAction => ({\n        type:EventActionEnum.SET_GUESTS,\n        payload\n    }),\n    setEvents: (payload:IEvent[]): SetEventsAction => ({\n        type:EventActionEnum.SET_EVENTS,\n        payload\n    }),\n    fetchGuest: () => async (dispatch:AppDispatch) => {\n        try {\n            const response = await UserService.getUsers();\n            dispatch((EventActionCreator.setGuests(response.data)))\n        } catch (e){\n            console.log(\"Error in EventActionCreator\", e);\n        }\n    },\n    createEvent: (event: IEvent) => async (dispatch: AppDispatch) => {\n        try{\n            const events = localStorage.getItem(\"events\") || '[]';\n            const json = JSON.parse(events) as IEvent[];\n            json.push(event);\n            dispatch(EventActionCreator.setEvents(json));\n            localStorage.setItem('events', JSON.stringify(json));\n        } catch (e) {\n            console.log(e)\n        }\n    },\n    fetchEvents: (username: string) => async (dispatch:AppDispatch) => {\n        try {\n            const events = localStorage.getItem('events') || '[]';\n            const json = JSON.parse(events) as IEvent[];\n            const currentUserEvents = json.filter(ev => ev.author === username || ev.guest === username);\n            dispatch((EventActionCreator.setEvents(currentUserEvents)))\n        } catch (e){\n            console.log(\"Error in fetchEvents\", e);\n        }\n    },\n    editEvent:(event:IEvent) => async (dispatch: AppDispatch) => {\n        try{\n            const events = localStorage.getItem(\"events\") || '[]';\n            const json = JSON.parse(events) as IEvent[];\n            json.map(ev => {\n                if(ev.id === event.id) {\n                    ev.author = event.author;\n                    ev.date = event.date;\n                    ev.description = event.description;\n                    ev.guest = event.guest;\n                }\n                return ev\n            })\n           dispatch(EventActionCreator.setEvents(json));\n           localStorage.setItem('events', JSON.stringify(json));\n        } catch (e) {\n            console.log(e)\n        }\n    },\n    deleteEvent:(eventId:string) => async (dispatch: AppDispatch) => {\n    try{\n        console.log(\"DELETe\", eventId);\n        const events = localStorage.getItem(\"events\") || '[]';\n        const json = JSON.parse(events) as IEvent[];\n        const currentEvents =json.filter(ev => ev.id!== eventId)\n        dispatch(EventActionCreator.setEvents(currentEvents));\n        localStorage.setItem('events', JSON.stringify(currentEvents));\n    } catch (e) {\n        console.log(e)\n    }\n},\n\n\n}","\nexport interface ModalData {\n    open: boolean;\n    data: any\n}\n\nexport enum ModalWindowActionEnum {\n    OPEN_MODAL_WINDOW = \"OPEN_MODAL_WINDOW\",\n    OPEN_MODAL_WINDOW_WITH_DATA = \"OPEN_MODAL_WINDOW_WITH_DATA\",\n    CLOSE_MODAL_WINDOW = \"CLOSE_MODAL_WINDOW\"\n}\n\nexport interface OpenModalWindowAction {\n    type: ModalWindowActionEnum.OPEN_MODAL_WINDOW,\n}\n\nexport interface OpenModalWindowWithDataAction {\n    type: ModalWindowActionEnum.OPEN_MODAL_WINDOW_WITH_DATA,\n    payload: ModalData\n}\nexport interface CloseModalWindowAction {\n    type: ModalWindowActionEnum.CLOSE_MODAL_WINDOW\n}\n\nexport type ModalWindowAction =\n    OpenModalWindowAction |\n    OpenModalWindowWithDataAction |\n    CloseModalWindowAction","import {ModalWindowActionEnum, CloseModalWindowAction, OpenModalWindowAction, OpenModalWindowWithDataAction} from \"./types\";\nimport {ModalData} from \"./types\";\n\nexport const ModalWindowActionCreator = {\n    openModalWindow: (data:boolean): OpenModalWindowAction => ({\n        type:ModalWindowActionEnum.OPEN_MODAL_WINDOW\n    }),\n    openModalWindowWithData: (data:ModalData): OpenModalWindowWithDataAction => ({\n        type:ModalWindowActionEnum.OPEN_MODAL_WINDOW_WITH_DATA,\n        payload:data\n    }),\n    closeModalWindow: (): CloseModalWindowAction => ({\n        type:ModalWindowActionEnum.CLOSE_MODAL_WINDOW\n    }),\n\n}","import React from \"react\";\nimport Login  from \"../pages/Login\";\nimport Event from \"../pages/Event\";\n\nexport interface IRouter {\n    path: string;\n    component:React.ComponentType;\n    exact?: boolean;\n}\n\nexport enum RouterName {\n    LOGIN = '/login',\n    EVENT = '/'\n}\n\n export const publicRoutes: IRouter[] = [\n    {path: RouterName.LOGIN, exact: true, component:Login }\n]\n\nexport const privatRoutes: IRouter[] = [\n    {path: RouterName.EVENT, exact: true, component: Event }\n]","import {AuthActionCreators} from \"./auth/action-creators\";\nimport {EventActionCreator} from \"./event/action-creator\";\nimport { ModalWindowActionCreator} from \"./modalWindow/action-creator\";\n\nexport const allActionCreators = {\n    ...AuthActionCreators,\n    ...EventActionCreator,\n    ...ModalWindowActionCreator\n}","import {useDispatch} from \"react-redux\";\nimport {bindActionCreators} from \"redux\";\nimport {allActionCreators} from \"../store/reducers/action-creators\";\n\nexport const useAction = () => {\n    const dispatch = useDispatch();\n    return bindActionCreators(allActionCreators, dispatch)\n}","import React, {FC, useState} from 'react';\nimport {Form, Input, Button, Card, Col} from 'antd';\nimport {rules} from \"../utils/rules\";\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\nimport {useAction} from \"../hooks/useActions\";\nimport Meta from \"antd/es/card/Meta\";\n\nconst LoginForm : FC = () => {\n    const {error, isLoading} = useTypedSelector(state => state.auth);\n    const {login} = useAction();\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n\n    const submit = () => {\n        login(username, password);\n    }\n\n    return (\n        <Card title=\"Login\" bordered={false} style={{ width: 400 }}>\n            <Meta description=\"Choose one of the users [user - password]:\" />\n            <Meta style={{marginBottom: 10 }} description=\"admin - a123, olha - o123, user1 - u123\" />\n                    <Form\n                        name=\"basic\"\n                        labelCol={{ span: 8 }}\n                        wrapperCol={{ span: 16 }}\n                        initialValues={{ remember: true }}\n                        onFinish={submit}\n                        autoComplete=\"off\"\n                    >\n                        {error &&\n                        <div style={{color:\"red\"}}>\n                            {error}\n                        </div>\n                        }\n                        <Form.Item\n                            label=\"Username\"\n                            name=\"username\"\n                            rules={[ rules.required('Please input your username') ]}\n                        >\n                            <Input\n                                value={username}\n                                onChange={e=> setUsername(e.target.value)}\n                            />\n                        </Form.Item>\n\n                        <Form.Item\n                            label=\"Password\"\n                            name=\"password\"\n                            rules={[ rules.required('Please input your password') ]}\n                        >\n                            <Input.Password\n                                value={password}\n                                onChange={e=> setPassword(e.target.value)}\n                            />\n                        </Form.Item>\n                        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                            <Button\n                                loading={isLoading}\n                                type=\"primary\"\n                                htmlType=\"submit\" >\n                                Submit\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Card>\n    );\n};\n\nexport default LoginForm;","import React, {FC} from 'react';\nimport {Layout, Row} from \"antd\";\nimport LoginForm from \"../components/LoginForm\";\n\nconst Login:FC = () => {\n    return (\n        <Layout>\n            <Row justify=\"center\" align=\"middle\" className=\"h100\">\n                <LoginForm />\n            </Row>\n\n        </Layout>\n    );\n};\n\nexport default Login;","export const formatDate = (date: Date) : string  => {\n    const year = date.getFullYear();\n    const month = date.getMonth() < 10 ? `0${date.getMonth()+1 }` : date.getMonth();\n    const day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\n    return `${year}/${month}/${day}`;\n\n}","import React, {FC} from 'react';\nimport {Calendar} from \"antd\";\nimport {IEvent} from \"../models/IEvent\";\nimport {Moment} from \"moment\";\nimport {formatDate} from \"../utils/date\";\nimport './../App.css';\nimport {useAction} from \"../hooks/useActions\";\n\ninterface EventCalendarProps {\n    events: IEvent[]\n}\nconst EventCalendar: FC<EventCalendarProps> = ({events}) => {\n    const {openModalWindowWithData} = useAction()\n\n    function dateCellRender(value: Moment) {\n        const formatedDate = formatDate(value.toDate());\n        const currentDayEvents = events.filter(ev => ev.date === formatedDate);\n        return (\n            <div className=\"events\">\n                {currentDayEvents.map((ev: any, index) => {\n                        const titleEv = `${ev.guest || ev.author}: ${ev.description}`;\n                        return (\n                            <div\n                                key={index}\n                                title={titleEv}\n                                onClick={() => openModalWindowWithData(ev)}\n                            >\n                                {ev.description}\n                            </div>\n                        )\n                    }\n                )}\n            </div>\n        );\n    }\n\n    return (\n        <Calendar\n            fullscreen={true}\n            dateCellRender={dateCellRender}\n        />\n    );\n};\n\nexport default EventCalendar;","import React, {FC, useEffect, useState} from 'react';\nimport {Button, DatePicker, Form, Input, Row, Select} from \"antd\";\nimport {rules} from \"../utils/rules\";\nimport {IEvent} from \"../models/IEvent\";\nimport moment, {Moment} from \"moment\";\nimport {formatDate} from \"../utils/date\";\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\nimport {useAction} from \"../hooks/useActions\";\n\nconst initialEvent = {\n    id: '',\n    author: '',\n    guest: '',\n    date: formatDate(moment().toDate()),\n    description: ''\n}\n\nconst EventForm: FC = () => {\n    const {createEvent, editEvent, deleteEvent, closeModalWindow, fetchEvents} = useAction();\n    const {user} = useTypedSelector(state => state.auth);\n    const {data} = useTypedSelector(state => state.modalWindow);\n    const {guests} = useTypedSelector<any>(state => state.event)\n\n    const [event, setEvent] = useState<IEvent>(initialEvent as IEvent);     //создаем состояние в котором будем хронить изменения в форме:\n    const [isEdit, setIsEdit] = useState(false);\n\n    const dateFormat = 'YYYY/MM/DD';\n\n    useEffect(() => {\n        fetchEvents(user.username);\n        if (data.author) {\n            setEvent({\n                ...event,\n                id: data.id,\n                author: data.author,\n                guest: data.guest,\n                date: data.date,\n                description: data.description\n            });\n            setIsEdit(true);\n        } else {\n            setEvent({\n                ...event,\n                ...initialEvent\n            });\n            setIsEdit(false);\n        }\n    }, [data]);\n\n    const selectDate = (dateMoment: Moment | null) => {\n        if (dateMoment) {\n            setEvent({...event, date: formatDate(dateMoment.toDate())})\n        }\n    }\n\n    const handleDeleteEvent = () => {\n        deleteEvent(event.id);\n        closeModalWindow();\n    }\n    const submitForm = () => {\n        if (isEdit) {\n            editEvent(event);\n        } else {\n            createEvent({\n                ...event,\n                id: `id-${Number(Date.now().toString())}-${event.description.replaceAll(\" \", '')}`,\n                author: user.username\n            });\n        }\n        closeModalWindow();\n    }\n\n    return (\n        <Form onFinish={submitForm}>\n            <Form.Item\n                label=\"Description\"\n            >\n                <Input\n                    name=\"descriptionValue\"\n                    value={event.description}\n                    onChange={(e) => setEvent({\n                         ...event,\n                         description: e.target.value\n                     })}\n                />\n            </Form.Item>\n\n            <Form.Item\n                label=\"Date\"\n                rules={[rules.isDateAfter(\"You can't create event in past\")]}\n            >\n                <DatePicker\n                    value={moment(event.date, dateFormat)}\n                    format={dateFormat}\n                    onChange={(date) => selectDate(date)}\n                />\n\n            </Form.Item>\n            <Form.Item\n                label=\"Guest\"\n                rules={[rules.required()]}\n            >\n                <Select\n                    value={event.guest || event.author}\n                    onChange={(guest: string) => setEvent({...event, guest})}>\n                    {guests.map((gue: any) =>\n                        <Select.Option value={gue.username} key={gue.username}>\n                            {gue.username}\n                        </Select.Option>\n                    )}\n                </Select>\n            </Form.Item>\n            <Row justify=\"end\">\n                <Form.Item>\n                    {isEdit &&\n                    <Button\n                        style={{\"marginRight\": \"10px\"}}\n                        type=\"default\"\n                        htmlType=\"button\"\n                        onClick={handleDeleteEvent}>\n                        Delete\n                    </Button>}\n                    <Button\n                        type=\"primary\"\n                        htmlType=\"submit\">\n                        {isEdit ? \"Edit\" : \"Create\"}\n                    </Button>\n                </Form.Item>\n            </Row>\n        </Form>\n    );\n};\n\nexport default EventForm;\n\n","import React, {FC} from 'react';\nimport {Modal} from \"antd\";\nimport EventForm from \"./EventForm\";\nimport {useAction} from \"../hooks/useActions\";\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\n\ninterface ModalWindowProps {\n    title: string;\n}\n\nconst ModalWindow:FC<ModalWindowProps> = ({title}) => {\n    const {open, data} = useTypedSelector(state => state.modalWindow)  //данные залогиненого user\n    const {closeModalWindow} = useAction();\n    const isPropertyAuthor = data.hasOwnProperty(\"author\");\n\n    return (\n        <div>\n            <Modal\n                title= {(isPropertyAuthor) ? \"Edit event\" : title }\n                visible={open}\n                onCancel={()=> closeModalWindow()}\n                footer={null}\n            >\n                <EventForm\n                />\n            </Modal>\n        </div>\n    );\n};\n\nexport default ModalWindow;","import React, {FC, useEffect } from 'react';\nimport EventCalendar from \"../components/EventCalendar\";\nimport { Row, Button} from \"antd\";\nimport {useAction} from '../hooks/useActions'\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\nimport ModalWindow from \"../components/ModalWindow\";\n\n\nconst Event:FC = () => {\n    const {fetchGuest, fetchEvents, openModalWindow } = useAction();\n    const {events} = useTypedSelector(state => state.event);\n     const {user} = useTypedSelector(state => state.auth);\n\n    useEffect(() => {\n        fetchGuest();\n        fetchEvents(user.username);\n    }, []);\n\n    return (\n        <>\n            <EventCalendar events={events} />\n            <Row justify=\"center\">\n                <Button\n                    onClick={()=>openModalWindow(true)}\n                >Add event</Button>\n            </Row>\n            <ModalWindow\n                title=\"Add event\"\n            />\n        </>\n    );\n};\n\nexport default Event;","import React from 'react';\nimport {Switch, Route, Redirect} from \"react-router-dom\";\nimport {privatRoutes, publicRoutes, RouterName} from \"../routes\";\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\n\nconst AppRouter = () => {\n    const {isAuth} = useTypedSelector(state => state.auth);\n\n    return (\n        isAuth\n            ?\n            <Switch>\n                {privatRoutes.map(route =>\n                    <Route\n                        path={route.path}\n                        exact={route.exact}\n                        component={route.component}\n                        key={route.path}\n                    />\n                    )}\n                    <Redirect to={RouterName.EVENT} />\n            </Switch>\n            :\n            <Switch>\n                {publicRoutes.map(route =>\n                    <Route\n                        path={route.path}\n                        exact={route.exact}\n                        component={route.component}\n                        key={route.path}\n                    />\n                )}\n                <Redirect to={RouterName.LOGIN} />\n            </Switch>\n    );\n};\n\nexport default AppRouter;","import React, {FC} from 'react';\nimport { Menu, Row} from 'antd';\nimport { useHistory } from 'react-router-dom';\nimport {RouterName} from \"../routes\";\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\nimport {useAction} from \"../hooks/useActions\";\nimport {Header} from \"antd/es/layout/layout\";\n\nconst Navbar: FC = () => {\n    const router = useHistory();\n    const {logout} = useAction();\n    const {user, isAuth} = useTypedSelector(state => state.auth);\n\n    return (\n        <Header>\n            <Row  justify=\"end\">\n            <div className=\"logo\" />\n            {isAuth\n                ?\n                <>\n                    <div style={{color:'white'}}>{user.username}</div>\n                    <Menu theme=\"dark\" mode=\"horizontal\" selectable={false} >\n                        <Menu.Item\n                            onClick={logout}\n                            key={1}>\n                            Out\n                        </Menu.Item>\n                    </Menu>\n                </>\n                :\n                  <Menu theme=\"dark\" mode=\"horizontal\" selectable={false} >\n                            <Menu.Item\n                                onClick={()=>router.push(RouterName.LOGIN)}\n                                key={1}>\n                                Login Now\n                            </Menu.Item>\n                        </Menu>\n            }\n            </Row>\n        </Header>\n    );\n};\n\nexport default Navbar;","import React, {FC, useEffect} from 'react';\nimport AppRouter from \"./components/AppRouter\";\nimport {Layout} from \"antd\";\nimport {Content, Footer} from \"antd/es/layout/layout\";\nimport Navbar from \"./components/Navbar\";\nimport './App.css';\nimport {useAction} from \"./hooks/useActions\";\nimport {IUser} from \"./models/IUser\";\n\n\nconst App:FC = () => {\n    const {setUser, setIsAuth} = useAction()\n    useEffect(() => {\n        if(localStorage.getItem('auth')){\n            setUser({username: localStorage.getItem(\"username\" || '') } as IUser   )\n            setIsAuth(true);\n        }\n    })\n    return (\n        <Layout className=\"layout\">\n            <Navbar />\n            <Content style={{ padding: '50px' }}>\n                <div className=\"site-layout-content\"><AppRouter /></div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>2021 Created by Ant UED</Footer>\n        </Layout>\n    );\n}\n\nexport default App;\n","import {AuthAction, AuthActionEnum, AuthState} from \"./types\";\nimport {IUser} from \"../../../models/IUser\";\n\nconst initialState:AuthState = {\n    isAuth: false,\n    user: {} as IUser,\n    isLoading: false,\n    error: ''\n}\n\nexport default function authReducer(state = initialState, action:AuthAction):AuthState{\n    switch (action.type) {\n        case AuthActionEnum.SET_AUTH:\n            return {...state, isAuth:action.payload, isLoading: false}\n        case AuthActionEnum.SET_USER:\n            return {...state, user: action.payload}\n        case AuthActionEnum.SET_IS_LOADING:\n            return {...state, isLoading:action.payload }\n        case AuthActionEnum.SET_ERROR:\n            return {...state, error: action.payload,  isLoading:false}\n\n        default:\n            return state\n    }\n}","import {EventActionEnum, EventState, EventAction} from \"./types\";\n\nconst initialState:EventState = {\n    events:[],\n    guests:[]\n}\n\nexport default function EventReducer(state = initialState, action: EventAction){\n    switch (action.type){\n        case EventActionEnum.SET_GUESTS:\n            return {...state, guests: action.payload}\n        case EventActionEnum.SET_EVENTS:\n            return {...state, events: action.payload}\n        case EventActionEnum.DELETE_EVENT:\n            return {...state, events: action.payload}\n        default:\n            return state;\n    }\n}","import {ModalData, ModalWindowAction, ModalWindowActionEnum} from './types';\n\nconst initialState: ModalData = {\n    open: false,\n    data: {}\n}\n\nexport default function modalWindowReducer(state = initialState, action: ModalWindowAction): ModalData {\n    switch (action.type) {\n        case ModalWindowActionEnum.CLOSE_MODAL_WINDOW:\n            return {\n                ...state,\n                open: false,\n                data: {}\n            }\n        case ModalWindowActionEnum.OPEN_MODAL_WINDOW:\n            return {\n                ...state,\n                open: true,\n                data: {}\n            }\n\n        case ModalWindowActionEnum.OPEN_MODAL_WINDOW_WITH_DATA:\n            return {\n                ...state,\n                open: true,\n                data: action.payload\n            }\n        default:\n            return state\n    }\n}","import auth from './auth';\nimport event from './event';\nimport modalWindow from './modalWindow';\n\nexport default {\n    auth,\n    event,\n    modalWindow\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunk from 'redux-thunk';\nimport reducers from './reducers';\n\nconst rootReducer = combineReducers(reducers);\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {store} from \"./store\";\n\nReactDOM.render(\n\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n\n    </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}